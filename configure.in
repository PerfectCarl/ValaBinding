AC_INIT([valabinding], 1.9, [taktaktaktaktaktaktaktaktaktak@gmail.com])
AC_PREREQ(2.53)
AM_INIT_AUTOMAKE(1.9 tar-ustar)
AM_MAINTAINER_MODE

ASSEMBLY_VERSION=1.9.0.0

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(MCS, gmcs)

if test "x$MONO" = "x" ; then
	AC_MSG_ERROR([Can't find "mono" in your PATH])
fi

if test "x$MCS" = "x" ; then
  AC_MSG_ERROR([Can't find "gmcs" in your PATH])
fi
AC_SUBST(PATH)
AC_SUBST(LD_LIBRARY_PATH)

dnl Find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
        AC_MSG_ERROR([You need to install pkg-config])
fi

MONO_REQUIRED_VERSION=1.1.10
PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MONO,mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)

if test "x$has_mono" = "xfalse"; then
      AC_MSG_ERROR([Please install mono version $MONO_REQUIRED_VERSION or later to install ValaBinding.
Please see http://www.mono-project.org/ to download latest mono sources or packages])
fi

if test "x$has_mono" = "xtrue"; then
    if test `uname -s` = "Darwin"; then
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=
	LIB_SUFFIX=.dylib
    else
	AC_PATH_PROG(RUNTIME, mono, no)
	AC_PATH_PROG(CSC, gmcs, no)
	LIB_PREFIX=.so
	LIB_SUFFIX=
    fi
fi


dnl hard dependencies
MONOADDINS_REQUIRED_VERSION=0.3
GTKSHARP_REQUIRED_VERSION=2.8.0

PKG_CHECK_MODULES(MONO_ADDINS, mono-addins >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_LIBS)
PKG_CHECK_MODULES(MONO_ADDINS_SETUP, mono-addins-setup >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_SETUP_LIBS)
PKG_CHECK_MODULES(MONO_ADDINS_GUI, mono-addins-gui >= $MONOADDINS_REQUIRED_VERSION)
AC_SUBST(MONO_ADDINS_GUI_LIBS)
PKG_CHECK_MODULES(GLIB_SHARP, glib-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLIB_SHARP_LIBS)
PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GTK_SHARP_LIBS)
PKG_CHECK_MODULES(GLADE_SHARP, glade-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
AC_SUBST(GLADE_SHARP_LIBS)

dnl soft dependencies
PKG_CHECK_MODULES(GNOME_SHARP, gnome-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_sharp=yes], [gnome_sharp=no])
AC_SUBST(GNOME_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GNOME_SHARP, test x$gnome_sharp = xyes)
PKG_CHECK_MODULES(GNOME_VFS_SHARP, gnome-vfs-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gnome_vfs_sharp=yes], [gnome_vfs_sharp=no])
AC_SUBST(GNOME_VFS_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GNOME_VFS_SHARP, test x$gnome_vfs_sharp = xyes)
PKG_CHECK_MODULES(GCONF_SHARP, gconf-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION, [gconf_sharp=yes], [gconf_sharp=no])
AC_SUBST(GCONF_SHARP_LIBS)
AM_CONDITIONAL(HAVE_GCONF_SHARP, test x$gconf_sharp = xyes)

gtksharp_prefix="`$PKG_CONFIG --variable=prefix gtk-sharp-2.0`"
AC_SUBST(gtksharp_prefix)

platform_bindings=""

enable_vala=yes
AM_CONDITIONAL(ENABLE_VALA, [test x$enable_vala = xyes])

CSC_FLAGS="-debug -codepage:utf8"

AC_SUBST(LIB_SUFFIX)
AC_SUBST(LIB_PREFIX)
AC_SUBST(ASSEMBLY_VERSION)
AC_SUBST(CSC_FLAGS)


MD_DIR='$(prefix)/lib/monodevelop'

# Standalone build
AC_ARG_ENABLE(standalone, AC_HELP_STRING([--enable-standalone], [enable standalone build [default=no]]), enable_standalone=${enableval}, enable_standalone=no)

if test x$enable_standalone = xyes; then
  MD_BUILDDIR=./build
  MD_ASSEMBLY_DIR="$prefix/lib/monodevelop/bin"
  MD_ADDIN_DIR="$prefix/lib/monodevelop/AddIns"
  echo "Building standalone"
else
  MD_BUILDDIR=../../main/build
  MD_ASSEMBLY_DIR="$MD_BUILDDIR/bin"
  MD_ADDIN_DIR="$MD_BUILDDIR/AddIns"
  echo "Building as part of MonoDevelop"
fi

AC_SUBST(MD_BUILDDIR)
AC_SUBST(MD_ASSEMBLY_DIR)
AC_SUBST(MD_ADDIN_DIR)
AC_SUBST(MD_DIR)

AC_OUTPUT([
Makefile
])
